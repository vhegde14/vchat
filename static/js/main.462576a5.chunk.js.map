{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","initializeApp","provider","GoogleAuthProvider","auth","getAuth","db","getFirestore","logIn","signInWithPopup","logOut","signOut","SignIn","Button","className","variant","onClick","SignOut","currentUser","Chat","useState","text","id","chat","setChat","messagesEndRef","useRef","a","chatData","collection","onSnapshot","query","orderBy","chatSnapshot","docs","map","doc","data","useEffect","current","scrollIntoView","behavior","scrollToBottom","getChat","message","ref","Post","props","hoverBackground","hovering","setHovering","toggleHover","backgroundColor","style","onMouseEnter","onMouseLeave","src","profilePicture","alt","displayName","SendMessage","setMessage","uid","photoURL","uploadMessage","event","preventDefault","addDoc","date","serverTimestamp","onSubmit","placeholder","type","value","onChange","e","target","App","useAuthState","user","document","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4RAmBMA,EAAiB,CACnBC,OATYC,0CAUZC,WATgBD,8BAUhBE,UATeF,cAUfG,cATmBH,0BAUnBI,kBATwBJ,eAUxBK,MATWL,4CAUXM,cATmBN,gBAYjBO,EAAMC,YAAcV,GACpBW,EAAW,IAAIC,IACfC,EAAOC,cAEPC,EAAKC,YAAaP,GAElBQ,EAAQ,WACVC,YAAgBL,EAAMF,IAGpBQ,EAAS,WACXC,YAAQP,IAyCZ,IAAMQ,EAAS,WACX,OACI,gCACI,cAACC,EAAA,EAAD,CAAQC,UAAU,gBAAgBC,QAAQ,YAAYC,QAASR,EAA/D,iCACA,kEAMNS,EAAU,WACZ,OAAOb,EAAKc,aACR,qBAAKJ,UAAU,iBAAf,SACI,cAACD,EAAA,EAAD,CAAQC,UAAU,SAASC,QAAQ,YAAYC,QAASN,EAAxD,yBAKNS,EAAO,WACT,MAAwBC,mBAAS,CAAC,CAAEC,KAAM,sBAAuBC,GAAI,aAArE,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAiBC,iBAAO,MAFf,4CAYf,WAAuBpB,GAAvB,eAAAqB,EAAA,sDACUC,EAAWC,YAAWvB,EAAI,QAEhCwB,YAAWC,YAAMH,EAAUI,YAAQ,UAAU,SAACC,GAC1CT,EAAQS,EAAaC,KAAKC,KAAI,SAACC,GAAD,mBAAC,eAAcA,EAAIC,QAAnB,IAA2Bf,GAAIc,EAAId,YAJzE,4CAZe,sBAsBf,OAdAgB,qBAAU,YAJa,WAAO,IAAD,EACzB,UAAAb,EAAec,eAAf,SAAwBC,eAAe,CAAEC,SAAU,WAInDC,KACD,CAACnB,IAUJe,qBAAU,kBApBK,2CAoBCK,CAAQrC,KAAK,IAGzB,sBAAKQ,UAAU,eAAf,iBACKS,QADL,IACKA,OADL,EACKA,EAAMY,KAAI,SAACS,GAAD,OACP,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQtB,OAEvB,qBAAKuB,IAAKpB,QAKhBqB,EAAO,SAACC,GACV,IACIC,EADJ,EAAgC5B,oBAAS,GAAzC,mBAAO6B,EAAP,KAAiBC,EAAjB,KAEA,SAASC,IACLD,GAAaD,GAOjB,OAJID,EADAC,EACkB,CAAEG,gBAAiB,WAEnB,CAAEA,gBAAiB,WAGrC,sBAAKtC,UAAU,OAAOuC,MAAOL,EAAiBM,aAAcH,EAAaI,aAAcJ,EAAvF,UACI,qBAAKrC,UAAU,eAAe0C,IAAKT,EAAMH,QAAQa,eAAgBC,IAAI,KACrE,sBAAK5C,UAAU,eAAf,UACI,qBAAKA,UAAU,WAAf,SACKiC,EAAMH,QAAQe,cAGnB,qBAAK7C,UAAU,eAAf,SAA+BiC,EAAMH,QAAQvB,cAMvDuC,EAAc,WAChB,MAA8BxC,mBAAS,IAAvC,mBAAOwB,EAAP,KAAgBiB,EAAhB,KAEA,SAAuCzD,QAAvC,IAAuCA,OAAvC,EAAuCA,EAAMc,YAArC4C,EAAR,EAAQA,IAAKC,EAAb,EAAaA,SAAUJ,EAAvB,EAAuBA,YAHD,SAKPK,EALO,8EAKtB,WAA6BC,GAA7B,SAAAtC,EAAA,6DACIsC,EAAMC,iBADV,SAGUC,YAAOtC,YAAWvB,EAAI,QAAS,CACjC8D,KAAMC,cACNhD,KAAMuB,EACNtB,GAAIwC,EACJL,eAAgBM,EAChBJ,YAAaA,IARrB,OAUIE,EAAW,IAVf,4CALsB,sBAkBtB,OACI,uBAAMS,SAAUN,EAAhB,UACI,uBAAOlD,UAAU,gBAAgByD,YAAY,gBAAgBC,KAAK,OAAOC,MAAO7B,EAAS8B,SAAU,SAACC,GAAD,OAAOd,EAAWc,EAAEC,OAAOH,UAC9H,uBAAO3D,UAAU,cAAc0D,KAAK,SAASC,MAAM,OAAOzD,QAASgD,QAKhEa,EA1If,WACI,MAAeC,YAAa1E,GAArB2E,EAAP,oBAMA,OAJAzC,qBAAU,WACN0C,SAASC,MAAQ,UAClB,IAGC,sBAAKnE,UAAU,MAAMuC,MAAO,CAACD,gBAAiB,WAA9C,UACI,0CACA,sBAAKtC,UAAU,UAAf,UACI,uCACCiE,EACG,gCACI,cAAC,EAAD,IACA,qBAAKjE,UAAU,gBAAgB0C,IAAG,OAAEuB,QAAF,IAAEA,OAAF,EAAEA,EAAMhB,SAAUL,IAAI,KACxD,sBAAK5C,UAAU,eAAf,kCAA6CiE,QAA7C,IAA6CA,OAA7C,EAA6CA,EAAMpB,kBAGvD,8BACI,cAAC,EAAD,SAKZ,qBAAK7C,UAAU,gBAAf,SACI,cAAC,EAAD,MAGJ,qBAAKA,UAAU,uBAAf,SACKiE,GAAQ,cAAC,EAAD,UC9DVG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASc,eAAe,SAM1BZ,M","file":"static/js/main.462576a5.chunk.js","sourcesContent":["import './App.css';\n\nimport { useEffect, useState, useRef } from 'react';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, signOut, GoogleAuthProvider } from \"firebase/auth\";\nimport { getFirestore, collection, onSnapshot, addDoc, serverTimestamp, query, orderBy } from \"firebase/firestore\";\n\nimport { Button } from '@mui/material';\n\nconst API_KEY = process.env.REACT_APP_FIREBASE_API_KEY;\nconst AUTH_DOMAIN = process.env.REACT_APP_FIREBASE_AUTH_DOMAIN;\nconst PROJECT_ID = process.env.REACT_APP_FIREBASE_PROJECT_ID;\nconst STORAGE_BUCKET = process.env.REACT_APP_FIREBASE_STORAGE_BUCKET;\nconst MESSAGING_SENDER_ID = process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID;\nconst APP_ID = process.env.REACT_APP_FIREBASE_APP_ID;\nconst MEASUREMENT_ID = process.env.REACT_APP_FIREBASE_MEASUREMENT_ID;\n\nconst firebaseConfig = {\n    apiKey: API_KEY,\n    authDomain: AUTH_DOMAIN,\n    projectId: PROJECT_ID,\n    storageBucket: STORAGE_BUCKET,\n    messagingSenderId: MESSAGING_SENDER_ID,\n    appId: APP_ID,\n    measurementId: MEASUREMENT_ID\n};\n\nconst app = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nconst auth = getAuth();\n\nconst db = getFirestore(app);\n\nconst logIn = () => {\n    signInWithPopup(auth, provider);\n}\n\nconst logOut = () => {\n    signOut(auth);\n}\n\n\nfunction App() {\n    const [user] = useAuthState(auth);\n\n    useEffect(() => {\n        document.title = \"VChat\";  \n    }, []);\n\n    return (\n        <div className=\"App\" style={{backgroundColor: '#2e2e2e'}}>\n            <title>vchat</title>\n            <div className=\"sidebar\">\n                <h1>vchat</h1>\n                {user ?\n                    <div>\n                        <SignOut />\n                        <img className=\"sidebar-photo\" src={user?.photoURL} alt=\"\" />\n                        <div className=\"sidebar-name\">Signed in as: {user?.displayName}</div>\n                    </div>\n                    :\n                    <div>\n                        <SignIn />\n                    </div>\n                }\n            </div>\n\n            <div className=\"chatContainer\">\n                <Chat />\n            </div>\n\n            <div className=\"sendMessageContainer\">\n                {user && <SendMessage />}\n            </div>\n\n        </div>\n    );\n}\n\nconst SignIn = () => {\n    return (\n        <div>\n            <Button className=\"signin-button\" variant=\"contained\" onClick={logIn}>Sign in with Google</Button>\n            <div>Sign in to be able to chat!</div>\n        </div>\n        //<button className=\"signin-button\" onClick={logIn}>Sign in with Google</button>\n    );\n}\n\nconst SignOut = () => {\n    return auth.currentUser && (\n        <div className=\"sidebar-signin\">\n            <Button className=\"button\" variant=\"contained\" onClick={logOut}>Sign out</Button>\n        </div>\n    );\n}\n\nconst Chat = () => {\n    const [chat, setChat] = useState([{ text: \"Loading Messages...\", id: \"loading\" }]);\n    const messagesEndRef = useRef(null)\n\n    const scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\n    }\n\n    useEffect(() => {\n        scrollToBottom()\n    }, [chat]);\n\n    async function getChat(db) {\n        const chatData = collection(db, \"chat\");\n        // setChat(chatData.docs.map((doc) => ({...doc.data(), id: doc.id})));\n        onSnapshot(query(chatData, orderBy(\"date\")), (chatSnapshot) => {\n            setChat(chatSnapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id })));\n        });\n    }\n\n    useEffect(() => getChat(db), []);\n\n    return (\n        <div className=\"chat-wrapper\">\n            {chat?.map((message) => (\n                <Post key={message.id} message={message} />\n            ))}\n            <div ref={messagesEndRef}></div>\n        </div>\n    );\n}\n\nconst Post = (props) => {\n    const [hovering, setHovering] = useState(false);\n    var hoverBackground;\n    function toggleHover() {\n        setHovering(!hovering);\n    }\n    if (hovering) {\n        hoverBackground = { backgroundColor: '#222222' }\n    } else {\n        hoverBackground = { backgroundColor: '#383b44' }\n    }\n    return (\n        <div className=\"post\" style={hoverBackground} onMouseEnter={toggleHover} onMouseLeave={toggleHover}>\n            <img className=\"profilePhoto\" src={props.message.profilePicture} alt=\"\" />\n            <div className=\"post-content\">\n                <div className=\"username\">\n                    {props.message.displayName}\n                </div>\n\n                <div className=\"message-text\">{props.message.text}</div>\n            </div>\n        </div>\n    );\n}\n\nconst SendMessage = () => {\n    const [message, setMessage] = useState(\"\");\n\n    const { uid, photoURL, displayName } = auth?.currentUser;\n\n    async function uploadMessage(event) {\n        event.preventDefault();\n\n        await addDoc(collection(db, \"chat\"), {\n            date: serverTimestamp(),\n            text: message,\n            id: uid,\n            profilePicture: photoURL,\n            displayName: displayName\n        });\n        setMessage(\"\");\n    }\n\n    return (\n        <form onSubmit={uploadMessage}>\n            <input className=\"message-field\" placeholder=\"Enter message\" type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)}></input>\n            <input className=\"send-button\" type=\"submit\" value=\"Send\" onClick={uploadMessage}></input>\n        </form>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}